const Session = require('../models/session');


// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏ô 30 ‡∏ß‡∏±‡∏ô‡∏≠‡∏≠‡∏Å‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
const deleteOldHistory = async () => {
    try {
        const cutoffDate = new Date();
        cutoffDate.setDate(cutoffDate.getDate() - 30);

        const result = await Session.deleteMany({ start_time: { $lt: cutoffDate } });
        console.log(`üóëÔ∏è ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡πÅ‡∏•‡πâ‡∏ß: ${result.deletedCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
    } catch (error) {
        console.error("‚ùå Error deleting old history:", error);
    }
};

const getHistory = async (req, res) => {
    const userId = req.user.id;
    let { days, searchDate } = req.query;

    try {
        await deleteOldHistory(); // ‚úÖ ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Å‡πà‡∏≠‡∏ô‡πÇ‡∏´‡∏•‡∏î

        let query = { user_id: userId };

        if (searchDate) {
            const searchStart = new Date(searchDate);
            const searchEnd = new Date(searchDate);
            searchEnd.setHours(23, 59, 59, 999);
            query.start_time = { $gte: searchStart, $lte: searchEnd };
        } else {
            let filterDate = new Date();
            filterDate.setDate(filterDate.getDate() - (days ? parseInt(days) : 30)); // ‚úÖ ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏ó‡∏µ‡πà 30 ‡∏ß‡∏±‡∏ô
            query.start_time = { $gte: filterDate };
        }

        const sessions = await Session.find(query).sort({ start_time: -1 });

        const history = sessions.map(session => ({
            id: session._id,
            date: new Date(session.start_time).toLocaleDateString("th-TH"),
            total_time: Math.floor((new Date(session.end_time) - new Date(session.start_time)) / 1000),
            exercises: session.exercises
        }));

        res.render("history", { history, selectedDays: days || 30, selectedDate: searchDate || "" });
    } catch (error) {
        console.error("‚ùå Error loading history:", error);
        res.status(500).send("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ");
    }
};



const deleteHistory = async (req, res) => {
    const { id } = req.params;

    try {
        const deletedSession = await Session.findByIdAndDelete(id);
        if (!deletedSession) {
            return res.status(404).json({ message: "Session not found" });
        }
        res.status(200).json({ message: "Session deleted successfully" });
    } catch (error) {
        console.error("‚ùå Error deleting session:", error);
        res.status(500).json({ message: "Failed to delete session" });
    }
};

const getDetail = async (req, res) => {
    const { id } = req.params;

    try {
        const session = await Session.findById(id);

        if (!session) {
            return res.status(404).send("Session not found");
        }

        const sessionDetail = {
            date: new Date(session.start_time).toLocaleDateString(),
            totalTime: session.total_time,
            exercises: session.exercises.map(exercise => ({
                name: exercise.name,
                count: exercise.count || null,
                duration: exercise.duration || null,
            })),
        };

        res.render("detail", { session: sessionDetail });
    } catch (error) {
        console.error("‚ùå Error loading session detail:", error);
        res.status(500).send("Error loading session detail");
    }
};

// ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ `module.exports` ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡πÅ‡∏•‡∏∞ export ‡∏ó‡∏∏‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô routes
module.exports = {
    getHistory,
    deleteHistory,
    getDetail,
};
